Class Title: Functions, generators and ducks
Facilitator: TM
Date: 060815
These notes are by: TM

duck typing: note this may be much better left for OOP sessions
explanation of duck typing failed, a more concrete example than type changin, needs to be included. examples after explanation.
a type is defined by what it does. maybe a verbal exercise, kinda like pictionary or whatever, it rolls, it usually has an axel, don't reinvent it. 
we haven't done OOP yet so we can't define a class but we've got to be able to show how we do type conversion or multiplication with float and int types. the harder case is showing a string with numbers included going into a valid numerical type. float("873.1239")
maybe we should do a quick pp( dir(int) ) and pp( dir(float) )

below is good and refs the wikipedia article
http://stackoverflow.com/questions/17028722/is-this-duck-typing-in-python

yield keywords and generators:
note: 'what does the yield keyword do' is #1 q on SO
http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python

include example with time module to time things! %timeit
or better yet use cProfile, probly learn how with pymotw
http://pymotw.com/2/profile/index.html#module-cProfile

illustration of xrange failed as well. unexpected results. this needs testing, what does below result in? i couldn't get xvar.next() 
xvar = xrange(3, 79, 3)
print xvar 

more about xrange type to expand on generators
xrange object will always take the same amount of memory, no matter the size of the range it represents. There are no consistent performance advantages.

XRange objects have very little behavior: they only support indexing, iteration, and the len() function.
also, the lazy evaluation is an important factor to convey here.

to cap the point of you should always use generators one can even go as far as to introduce the itertools library and use izip, imap and stuff

still need to know exactly where these streams are being stored and how to make the sale on generators, get other people to the level of explaining is the goal

 to talk about this intelligently you also need to know how much RAM a data structure is taking up. obviously test this by putting a single big data structure into your module and then use your profiling tools from there, this video by sentdex is fairly good https://www.youtube.com/watch?v=07-K4LFhBMc

also, that python is the language to 'get things done'
readable, writeable, libraries galore across many domains

function signatures:
first: next(iterator[, default])
more advanced: print(*objects, sep=' ', end='\n', file=sys.stdout) signature as the signature example to decode. 

does a function signature include a function's return value?
yet, i still can't read the parts of the docs listed below
primary ::=  atom | attributeref | subscription | slicing | call

functional programming paradigm:
knowing that we can put functions that evaluate to our proper value in the signature, thus we can nest all sorts of functions together. 
dict( enumerate( string.ascii_letters)  )
notice that we are separating nicely, which may help readable and 

explain expressions from the view point of 
(do x for x in iterable)
(do x for x in iterable if do x)

include tuple expression tuple(x for x in iterable), people will of course ask, also include set expression i suppose

when introducing the functional paradigm briefly we are introducing the ability to nest functions( upon(functions( upon(functions) ) ) )
usually its kind to leave a few spaces for human readers

introducing list comps, dict comps, generator expressions, set displays

basic dict comp example
>>> a = enumerate( string.ascii_letters) #enumerate object is unique, does it inherit from a generator type as well?
>>> b = {v:k for (k,v) in a}

--make sure to recap at the end--


--lab

for the lab what text should be operated on, and manipulated?

lab ideas can be a bit difficult, reiterate concepts learned before, getting each token from a generator, manipulating it in the way that we need and prefer, what NLP or nltk things can we accomplish?

what i know to do with text? have some basic goals, neato things that you can now do with text now that you have programmatic skills?

reversing the text is fun, playing mad libs is also fun, making a bot could be fun. 

input something. have a vocal api with pyttysx? installation and platform support needed for this one though. 


extra: sets are fun, here's an example of bitwise set operators
warriors = set(['MacLeod', 'Wallace', 'Leonidas'])

scotsmen = set(['MacLeod', 'Wallace', 'Willie'])

scotsmen -  warriors
#{'Willie'}

warriors | scotsmen
#{'Leonidas', 'MacLeod', 'Wallace', 'Willie'}

scotsmen & warriors
#{'MacLeod', 'Wallace'}

scotsmen ^  warriors
#{'Leonidas', 'Willie'}

ls_xr = list(xrange(11))
print(ls_xr)
ls_r = range(6,17)
print(ls_r)

#union of both sets
union = set(ls_xr) | set(ls_r)
print(sorted(union))

#intersection of both sets
inter = set(ls_xr) & set(ls_r)
print(sorted(inter))

#difference of set A - B, in A but not B
diff = set(ls_xr) - set(ls_r)
print(diff)

#symmetric diff ()
sym_diff = set(ls_xr) ^ set(ls_r)
print(sym_diff)


fileline.decode("utf-8").encode('ascii', 'xmlcharrefreplace')
or
f = codecs.open("test", "r", "utf-8")